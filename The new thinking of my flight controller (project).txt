There should be one main function that operate the whole vehicle depending on the following class interface.
Should not be situation where new method in class is created becouse main program or other classes need something additional.
Should be possible to upgrade or make some changes to the certain class without causing damage of other program parts (according to the interface).

The structure of the program:
	
	Classes interfaces: ( (out) - should be in arduino library folder)
		
		- (out) Tasker class - program that handle all tasks in the drone
			Public methods:
				- add function
					parameters:
						- pointer to the void function
						- approximate run time (or max)
				- run tasker function (or runned by hardware timer automatically)
		
		
		- Motors handling class - program that handle motors eg. arming...
			Public methods:
				- setMotorsArmed: parameters(bool: true - armed; false - disarmed)
				- set on each motors (4x for each motor)
		
		
		- (out) Communication Base class (virtual) if possible inherit from PacketSerial library and implement all required methods (except data packets - receive and send - which will be implemented in derivate class)
			This class should be wrote in PacketSerial file (create new upgraded PacketSerial library file)
			Public methods:
				- isAvailable: check if there are some data waiting to receive
				- get serial pointer (or it's reference) - for derivate classes purposes
				- ...
		
		- (out) Radio Module Cover class (virtual) - inherit from Communication Base class (this class is between Communication Base and Ground Communication Packet Handling classes if communication is using the radio module;
		                                                                              for just serial communication inherit only from Communication Base class)
			Public methods:
				- set
					- OTA speed (1:.., 2:.., 3:..)
					- baud rate (1:.., 2:.., 3:.., 4:..)
					- transmission power (1, 2, 3, 4, auto)
				- send params to device
				- ...
				
			Public constans:
				- enum OTASpeeds: ....list of possible speeds.....
				- enum baudRates: 1200, 2600, 4800, 9600, ....., 19200, ..., 115200
				- enum transmissionPowers: XXdBi, XXdBi, XXdBi
		
		
		- Communication Packet Handling class (name depends on a purpose, could be several classes with different protocols) - program that will handle receiving and sending data packets (contain comunication protocol
						and all communication variables in one structure that can be passed by reference to the rest of the program) - inherit form Communication Base class
			Public methods:
				- send: parameters (int: data packet type)
				- receive: store received data in certain variables (after checking if data is available)
		
		
		- Serial Debugger class - inherit form Communication Base class. Used to check program activity on the computer via USB and desktop app (or maybe android also)
			Public methods:
				- Send debug data
				- Receive debug data (if I find a reason for that function)
		
		
		- Sensors class - all sensors handling
			Public methods
				- get:
					- acceleration x, y, z
					- rotation x, y, z
					- angle x, y
					- heading
					- pressure (should not be used for flight purposes, only to know pressure)
					- height (further would be combined with accelerometer or sonar or sth similar)
					- gpsLong
					- gpsLat
					- gps speed
					- optionally sonar reading
					- temterature
					- battery voltage
				- run compass
				- run accelerometer
				- run barometer
				- optionally run sonar
				
		
		- (out) PID class - class for pid claculations
		
		
		- (out) Advanced Diode class - to light the diode with some patterns (also using PWM) without using delay (time calculations, so have to be runned every constant time)
				In drome it should be run every constant time but could provide a way to automatically calculate the time
			Public methods:
				- set(... provide Paterns enum ...)
				- usePwm (true - use, false - just HIGH or LOW)
				
			Public constans:
				- enum Patterns: HIGH=1, LOW=0, BLINK (second argument is interval), FADE (interval)=0, IGNITE (interval)=1  (HIGH and IGNITE is the same)
				
		
		- (out) EVA Filter class - Exponentially Weighted Averages filter used to filter values
			Public methods:
				- init (filter beta)
				- updateFilter (new data)
				- change filter beta (new beta)
				
		
		- Timing Info class - will provide the info about method duration, catch overtiming problems, free time (sum of waiting time in one loop)
					By now I don't know how to connect this class and tasket becouse tasker have running functions info.
					!Maybe takser should inherit from that class!
			Public methods:
				- set function start time - save time before function is called (to calculate duration)
				- set function end time - runned when function ends
				- function duration
				- setOneLoopDuration(one loop duration) - used to calculate CPU load and waiting time
				- cpu load - return uint8 0-100
				- get waiting time
			
				
				
		- Flight Modes class - it is a concept, I don't know if it is better to make flight modes in a special class or in the main program
		
		
		
		
		
Communication inheritance explanation:
	
	It could be the following:
		- PacketSerial - Communication Base class - Communication Packet Handling class  --->  To use just serial (like arduino-arduino communication)
		- PacketSerial - Communication Base class - Radio Module Cover class - Communication Packet Handling class  --->  To connect using radio module that needs some special methods to change module parameters
	
	
	
	
	
	