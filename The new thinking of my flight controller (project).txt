There should be one main function that operate the whole vehicle depending on the following class interface.
Should not be situation where new method in class is created because main program or other classes need something additional.
Should be possible to upgrade or make some changes to the certain class without causing damage of other program parts (according to the interface).


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
The structure of the program:
	
	Classes interfaces: ( (out) - should be in Arduino library folder)
	
		- (out) SimpleTasker (scheduler) class - program that handle function calling without using Timers, only using micros() and elapsed time
			Public methods:
				- (void) add function (pointer to the void function, interval [in micros], max run time)
				- (void) schedule tasks - run only in the setup just after adding all functions, figure out the order (if certain tasks have the same interval or its multiple, then add time shift - duration). Tasks will be called using time shift.
				- (virtual void) run tasker function (should be the only function run in the loop) checks if time has elapsed since last execution and if so, execute proper function.
						It have to check if system is not overload (like in GoodTasker) and execute functions one by one (not all at one time) (time shift)
		
		- (out) Tasker (scheduler) class - program that handle all tasks in the drone, inherits from SimpleTasker. Expand SimpleTasker with hardware Timer handlinding one main task and other tasks like in SimpleTasker
				(!Maybe tasker should also inherit from Timing Info class!)
			Public methods:
				- (void) add main function (pointer to the void function, interval [in micros], max run time) - add the main function (called only once)
				- (virtual void) run tasker function (should be the only function run in the loop) checks if Timer set the flag and if so, execute proper functions. (main function executed using Timer, other like in SimpleTasker)
						It have to check if system is not overload (like in GoodTasker) and execute functions one by one (not all at one time)
		
		
		- Motors handling class - program that handle motors eg. arming...
			Public methods:
				- (void) setMotorsState: (enabled/disabled because arming will be in the main program, arming should cause reset of certain values) parameters(bool: true - enabled; false - disabled)
				- (void) set on each motors (4x for each motor)
		
		
		- (out) Communication Base class (virtual) if possible inherit from PacketSerial library and implement all required methods (except data packets - receive and send - which will be implemented in derivate class)
			This class should be wrote in PacketSerial file (create new upgraded PacketSerial library file)
			Public methods:
				- (bool) isAvailable: check if there are some data waiting to receive
				- (*Serial) get serial pointer (or it's reference) - for derivate classes purposes
				- calcTestSum
				- checkTestSum
				- sendData
				- receiveData
				- ...
		
		- (out) Radio Module Cover class (virtual) - inherit from Communication Base class (this class is between Communication Base and Ground Communication Packet Handling classes if communication is using the radio module;
		                                                                              for just serial communication inherit only from Communication Base class)
			Public methods:
				- (void) set - remember to send data to the transceiver after setting
					- OTA speed (1:.., 2:.., 3:..)
					- baud rate (1:.., 2:.., 3:.., 4:..)
					- transmission power (1, 2, 3, 4, auto)
				- send parameters to device
				- read parameters from device
				
			Public constants:
				- enum OTASpeeds: ....list of possible speeds.....
				- enum baudRates: 1200, 2600, 4800, 9600, ....., 19200, ..., 115200
				- enum transmissionPowers: XX dBi, XX dBi, XX dBi
		
		
		- Communication Packet Handling class (name depends on a purpose, could be several classes with different protocols) - program that will handle receiving and sending data packets (contain comunication protocol
						and all communication variables in one structure that can be passed by reference to the rest of the program) - inherit form Communication Base class
			Public methods:
				- init
				- send: parameters (int: data packet type)
				- manageReceiving: store received data in certain variables if available, else update availability
	
		
		- Serial Debugger class - inherit form Communication Base class. Used to check program activity on the computer via USB and desktop app (or maybe android also)
			Public methods:
				- Send debug data
				- Receive debug data (if I find a reason for that function)
		
		
		- Sensors class - all sensors handling
			Public methods
				- get (inline):                 (get - get sensor values from the private)
					- () acceleration x, y, z
					- () rotation x, y, z
					- angle x, y
					- heading
					- pressure (should not be used for flight purposes, only to know pressure)
					- height (further would be combined with accelerometer or sonar or sth similar)
					- gpsLong
					- gpsLat
					- GPS speed
					- optionally sonar reading
					- temperature
					- battery voltage
				                         (run - read values form sensors, if there isn't a new value then extrapolate it; extrapolate only improtant readings)
				- (void) readNew compass
				- (void) readNew accelerometer
				- (void) readNew barometer
				- (void) readNew ground height sensor
				- (void) readNew GPS
				- (void) readNew voltage
				- calibrate accelerometer - calculate offsets for the MPU6050 DMP (like in MPU, not just subtraction to be 0), long process
				
		
		- (out) PID class - class for PID calculations
			Public methods:
				- set: kp, ki, kd, imax, all parameters
				- get: kp, ki, kd, imax
				- update controller(new value)
				- set interval
				- get interval
				- reset controller
		
		
		- (out) Advanced Diode class - to light the diode with some patterns (also using PWM) without using delay (time calculations, so have to be runned every constant time)
				In drone it should be run every constant time but could provide a way to automatically calculate the time
			Public methods:
				- set(... provide Patterns enum ...)
				- usePwm (true - use, false - just HIGH or LOW)
				
			Public constants:
				- enum Patterns: HIGH=1, LOW=0, BLINK (second argument is interval), FADE (interval)=0, IGNITE (interval)=1  (HIGH and IGNITE is the same)
				
		
		- (out) EVA Filter class - Exponentially Weighted Averages filter used to filter values
			Public methods:
				- constructor (filter beta)
				- updateFilter (new data)
				- set filter beta (new beta)
				
		
		- Timing Info class - will provide the info about method duration, catch overtiming problems, free time (sum of waiting time in one loop)
					By now I don't know how to connect this class and tasker because tasker have running functions info.
					!Maybe tasker should inherit from that class!
			Public methods:
				- set function start time - save time before function is called (to calculate duration)
				- set function end time - run when function ends
				- function duration
				- setOneLoopDuration(one loop duration) - used to calculate CPU load and waiting time
				- CPU load - return uint8 0-100
				- get waiting time
				- get system unstable flag - if at least one time will happen a overload, this function return true, else false
				- get working state - return one of working states enum
				
			Public constants:
				- enum Working states: NOMINAL (all good), SYSTEM UNSTABLE (sometimes overloaded), OVERLOAD (all the time overloaded)
			
				
				
		- Flight Modes class - it is a concept, I don't know if it is better to make flight modes in a special class or in the main program
		
		
		
		
		
Communication inheritance explanation:
	
	It could be the following:
		- PacketSerial - Communication Base class - Communication Packet Handling class  --->  To use just serial (like Arduino-Arduino communication)
		- PacketSerial - Communication Base class - Radio Module Cover class - Communication Packet Handling class  --->  To connect using radio module that needs some special methods to change module parameters
		
		
		

		


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Main program structure design:

	Objects:
		- Ground Communication (from Communication Packet Handling for Ground class)
		- Tasker (from tasker)
		- angleXPID (from PID)
		- angleYPID (from PID)
		
	
	Functions:
		- manage the FlightMode: execute proper flight mode functions
		- change the FlightMode (FlightModes enum)
		- arm the motors: reset values which could cause sth bad (eg. altitude error), set the proper FlightMode and then enable the motors using motors object.
		
	constants:
		- enum FlightModes: STABILIZE, ALT_HOLD, GPS_HOLD, RETURN_TO_HOME, RETURN_TO_PILOT, LAND
		
	
	
	
	FlightModes specification:
				FlightModes should be constructed in separate functions to reuse the code (eg. in AltHold firstly height error is calculated and power to eliminate the error and then Stabilize function, but
																							don't call <in this example> Stabilize function in AltHold function but in the main function that manage FlightModes)
		- Stabilize:
			Hold the level and heading using PID library
		
		- AltHold:
			Same as Stabilize + altitude holding based on barometer reading of further sonar and accelerometer.
			Influence on throttle value (simulate a pilot)
		
		- GPSHold:
			AltHold + position holding
			Influence on pilot pitch and roll value (simulate a pilot): Firstly calculate the error in lat and long. Based on error, using PID controller and filter (to be smooth) add filtered PID output to pitch or roll
		
		- ReturnTo:
			- Home
				Return to the launch place.
				Steps:
					- Step 1:
						Gaining a height.
						When reach that height change to Step 2.
					- Step 2:
						Flying to the place above home position.
						When reached, change the current FlightMode to the Land mode.
			- Pilot
				Return to the place, were the pilot is when FlightMode changed.
				Steps:
					- Step 1:
						Gaining a height.
						When reach that height change to Step 2.
					- Step 2:
						Flying to the place above the pilot's position.
						When reached, change the current FlightMode to the Land mode.
		
		- Land
			Land in the current position
			Steps:
				- Step 1:
					Calculate the descending rate and keep it at the set value (in cm/s) using the PID controller (use also filter before PID).
					Keep descending until reach one meter (or sth constant) (then limit the value if is higher to make the final approach to the ground).
					When touchdown is detected (descending rate is around 0 for longer time), change to Step 2.
				- Step 2:
					Set the throttle to 0 and then disarm the motors.
					
					
					
					
					
					
					
					
					
					
					
IMPORTANT IDEAS:
	
	- ALWAYS when there are lots of or big-sized variables, create getter which return const reference to this variable/es  ( const double & getVal() const {return var;} )
					

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	